/* --------------------
   Case Study Questions
   --------------------*/

-- 1. What is the total amount each customer spent at the restaurant?
-- 2. How many days has each customer visited the restaurant?
-- 3. What was the first item from the menu purchased by each customer?
-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
-- 5. Which item was the most popular for each customer?
-- 6. Which item was purchased first by the customer after they became a member?
-- 7. Which item was purchased just before the customer became a member?
-- 8. What is the total items and amount spent for each member before they became a member?
-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

-- Example Query:
SELECT
  	product_id,
    product_name,
    price
FROM dannys_diner.menu
ORDER BY price DESC
LIMIT 5;

-- 1. What is the total amount each customer spent at the restaurant?

SELECT 
	sales.customer_id,
  SUM(menu.price) AS total_spent
FROM dannys_diner.sales
JOIN dannys_diner.menu
	ON sales.product_id = menu.product_id
GROUP BY customer_id
ORDER BY customer_id;

-- 2. How many days has each customer visited the restaurant?

SELECT
  customer_id,
  COUNT (DISTINCT order_date) AS visited_days
FROM dannys_diner.sales
GROUP BY customer_id;

-- 3. What was the first item from the menu purchased by each customer?

WITH CTE_order AS (
  SELECT
    s.customer_id,
    m.product_name,
    ROW_NUMBER() OVER(
      PARTITION BY s.customer_id
      ORDER BY
        s.order_date,
        s.product_id
      ) AS item_order
      FROM dannys_diner.sales AS s
      JOIN dannys_diner.menu AS m
      ON s.product_id = m.product_id
  )
  SELECT *
  FROM 
  CTE_order
  WHERE
  item_order = 1;
    
-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?

SELECT
  m.product_name,
  COUNT(s.product_id) AS order_count
FROM dannys_diner.sales AS s
INNER JOIN dannys_diner.menu AS m
  ON s.product_id = m.product_id
GROUP BY
  m.product_name
ORDER BY
  order_count DESC
 LIMIT 1;

-- 5. Which item was the most popular for each customer?

WITH CTE_order_count AS (
  SELECT 
    s.customer_id,
    m.product_name,
    COUNT(*) AS order_count
  FROM dannys_diner.sales AS s
  JOIN dannys_diner.menu AS m
    ON s.product_id = m.product_id
  GROUP BY
  customer_id,
  product_name
  ORDER BY
  customer_id,
  order_count DESC
  ),
  CTE_popular_rank AS (
    SELECT
      *,
      RANK() OVER(PARTITION BY customer_id ORDER BY order_count DESC) AS rank
    FROM CTE_order_count
)
SELECT *
FROM CTE_popular_rank
WHERE
rank = 1;

-- 6. Which item was purchased first by the customer after they became a member?

WITH memb_orders_CTE AS(
	SELECT
		s.customer_id,
		order_date,
		join_date,
		product_id,
		row_number() over (partition by s.customer_id
		order by order_date) as rank
	FROM
		dannys_diner.sales AS s,
		dannys_diner.members AS m
	WHERE
		m.customer_id = s.customer_id
		AND
		order_date >= join_date
)

SELECT 
	customer_id,
	product_name,
	order_date, 
	join_date
FROM 
	memb_orders_CTE mo,
	dannys_diner.menu AS m
WHERE 
	m.product_id = mo.product_id
	AND
	rank = 1
;

-- 7. Which item was purchased just before the customer became a member?

WITH CTE_before_member as
(
  SELECT s.customer_id, menu.product_name, s.order_date, m.join_date,
   DENSE_RANK () OVER (PARTITION BY s.customer_id ORDER BY s.order_date DESC) as rank
FROM dannys_diner.sales AS s
JOIN dannys_diner.members AS m
  ON s.customer_id = m.customer_id
JOIN dannys_diner.menu
  ON s.product_id = menu.product_id
WHERE s.order_date < m.join_date
GROUP BY s.customer_id, menu.product_name, s.order_date, m.join_date
)
SELECT
customer_id,
product_name
FROM CTE_before_member
WHERE rank = 1;

-- 8. What is the total items and amount spent for each member before they became a member?

SELECT m.customer_id, COUNT(s.product_id) as total_items,
SUM(menu.price) as total_spent
FROM dannys_diner.members AS m
JOIN dannys_diner.sales AS s
  ON m.customer_id = s.customer_id
JOIN dannys_diner.menu
  ON s.product_id = menu.product_id
WHERE s.order_date < m.join_date
GROUP BY m.customer_id;

-- 9. If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

WITH CTE_points AS
(
  SELECT *,
   CASE WHEN product_id = 1 THEN price * 20
   ELSE price * 10 END as points
  FROM dannys_diner.menu
)
SELECT s.customer_id, SUM(p.points) as total_points
FROM dannys_diner.sales AS s
JOIN CTE_points AS p
  ON s.product_id = p.product_id
GROUP BY s.customer_id;
